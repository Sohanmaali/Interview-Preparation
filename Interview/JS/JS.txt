
1. What is JavaScript?  
Ans-> JavaScript is a high-level, interpreted programming language that is primarily used for making web pages interactive. It is one of the core technologies of the web, along with HTML and CSS.
------------------------------------------------------------------------------------------------------------------

2. How does a browser execute JavaScript? 
------------------------------------------------------------------------------------------------------------------

3. What are the features of JavaScript?  
Ans-> JavaScript is a powerful, versatile programming language primarily used for web development. Some key features of JavaScript include:

     1. Lightweight & Interpreted
   - JavaScript is an interpreted language, meaning it does not require compilation before execution.
   - It runs directly in the browser, making it lightweight and fast.

    2. Client-Side Scripting
   - JavaScript is mainly used for front-end development to create interactive and dynamic web pages.
   - It runs in the user's browser without requiring server interaction.

    3. Dynamic Typing
   - Variables in JavaScript are not bound to specific data types.
   - A variable can hold different data types at different times.

    4. Prototype-Based Object-Oriented
   - JavaScript supports object-oriented programming using prototypes instead of classes (ES6 introduced classes, but they are syntactic sugar over prototypes).

    5. Functional Programming
   - Functions in JavaScript are first-class citizens, meaning they can be assigned to variables, passed as arguments, and returned from other functions.

    6. Event-Driven & Asynchronous
   - JavaScript supports event-driven programming, handling user actions like clicks and keypresses.
   - It uses asynchronous programming with `setTimeout`, `setInterval`, and Promises (introduced in ES6).

    7. Single-Threaded & Non-Blocking
   - JavaScript follows a single-threaded event loop model, handling multiple tasks using asynchronous callbacks and Promises.

    8. Cross-Browser Compatibility
   - JavaScript runs in almost all modern web browsers, ensuring compatibility across different platforms.

    9. ECMAScript Standardization
   - JavaScript follows the ECMAScript (ES) standard, with updates introducing new features (e.g., ES6 introduced `let`, `const`, arrow functions, and classes).

    10. DOM Manipulation
   - JavaScript allows developers to interact with and modify the Document Object Model (DOM), updating the content and style of web pages dynamically.

    11. Modules & Import/Export (ES6)
   - JavaScript supports modular programming using `import` and `export`, making code reusable and maintainable.

    12. Extensive Libraries & Frameworks
   - JavaScript has a rich ecosystem with frameworks like React, Angular, Vue, and libraries like jQuery, making development easier.

    13. Backend Development with Node.js
   - JavaScript is not limited to the client side; with Node.js, it can be used for server-side development as well.

    14. Memory Management & Garbage Collection
   - JavaScript has an automatic garbage collection mechanism that manages memory allocation and deallocation.

------------------------------------------------------------------------------------------------------------------


4. What is the DOM (Document Object Model)? 
Ans-> The DOM (Document Object Model) is a programming interface for web documents. It represents the structure of an HTML or XML document as a tree-like structure, where each element in the document is treated as an object that can be manipulated using JavaScript. 
------------------------------------------------------------------------------------------------------------------

5. How do you perform a click event in JavaScript?
Ans-> You can add an event listener using:
document.getElementById("btn").addEventListener("click", function() {
    alert("Button clicked!");
});
------------------------------------------------------------------------------------------------------------------


6. What are `alert()` and `confirm()` functions?  
Ans-> alert(): Displays a popup message. Example: alert("Hello World!");
confirm(): Displays a confirmation box with OK/Cancel. Example:
let result = confirm("Are you sure?");
if (result) alert("Confirmed");
------------------------------------------------------------------------------------------------------------------



7. What is the difference between `undefined` and `null`?  
Ans-> undefined: A variable that has been declared but not assigned a value.
null: A deliberate assignment indicating no value.
------------------------------------------------------------------------------------------------------------------



8. What is the difference between `==` and `===`?  
Ans-> == (loose equality): Compares values but allows type conversion.
=== (strict equality): Compares both value and type.
------------------------------------------------------------------------------------------------------------------

9. What is a function? Can we overload functions in JavaScript?  
Ans-> A function is a reusable block of code that is parform some operation JavaScript does not support function overloading like Java, but we can handle it manually using arguments.
------------------------------------------------------------------------------------------------------------------

10. What is a callback function?  
Ans-> A callback is a function passed as an argument to another function, commonly used in asynchronous programming.
function greet(name, callback) {
    console.log("Hello, " + name);
    callback();
}
greet("Alice", function() { console.log("Callback executed!"); });

------------------------------------------------------------------------------------------------------------------

11. What is a promise? What are the advantages of promises over callbacks?  
Ans-> A promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
It can be in one of three states: pending, fulfilled, or rejected.
------------------------------------------------------------------------------------------------------------------


12. What is callback hell?
Ans-> Callback Hell (also known as "Pyramid of Doom") is a situation in JavaScript where multiple nested callback functions make the code hard to read, maintain, and debug. This happens when dealing with multiple asynchronous operations that depend on each other.
------------------------------------------------------------------------------------------------------------------

13. What is `async` and `await`? How do you use them?
And-> async and await are modern JavaScript features that make working with Promises easier. They allow us to write asynchronous code in a way that looks and behaves more like synchronous code, making it cleaner, more readable, and easier to debug.
The async keyword is used to declare a function that always returns a Promise.
Inside an async function, you can use await to pause execution until a Promise is resolved.
await is used inside an async function to pause execution until a Promise is resolved or rejected.
It makes the code behave synchronously while still being non-blocking.
------------------------------------------------------------------------------------------------------------------

14. What is a closure?
Ans-> A closure is a function that remembers the variables from its outer scope, even after the outer function has finished executing.

In simple terms, a closure allows a function to access variables from its parent function, even after the parent function has returned.
------------------------------------------------------------------------------------------------------------------

15. What is an Immediately Invoked Function Expression (IIFE)?
Ans-> An Immediately Invoked Function Expression (IIFE) is a JavaScript function that runs immediately after it is defined.

It is a self-executing function that helps in encapsulation and avoiding global scope pollution.
(function() {
    console.log("This function runs immediately!");
})();
------------------------------------------------------------------------------------------------------------------
  
16. What is an anonymous function?
Ans-> An anonymous function is a function without a name. It is often used when a function does not need to be reused multiple times.
const greet = function() {
    console.log("Hello, World!");
};

greet(); // Output: Hello, World!

------------------------------------------------------------------------------------------------------------------
 
17. Explain variable hoisting in JavaScript.
Ans-> Hoisting is a JavaScript mechanism where variable and function declarations are moved to the top of their scope before code execution. This means you can use variables and functions before they are declared in your code.
1. Hoisting with var
Variables declared with var are hoisted but are initialized as undefined.

Example:
console.log(a); // Output: undefined
var a = 10;
console.log(a); // Output: 10
👉 Why?
The declaration var a; is hoisted to the top, but its assignment (a = 10) remains in place.

Internally, JavaScript treats the code like this:
var a;  // Declaration hoisted to the top
console.log(a); // undefined
a = 10;
console.log(a); // 10
2. Hoisting with let and const
Variables declared with let and const are also hoisted, but they are not initialized. They remain in the "Temporal Dead Zone" (TDZ) until the declaration is encountered.

Example:
console.log(b); // ReferenceError: Cannot access 'b' before initialization
let b = 20;
console.log(b);
👉 Why?
Unlike var, let does not initialize to undefined. Instead, JavaScript keeps it in a "dead zone" until it is declared.

3. Hoisting with Functions
Function declarations are fully hoisted, meaning you can call the function before its definition.

Example:
sayHello(); // Output: "Hello, JavaScript!"

function sayHello() {
  console.log("Hello, JavaScript!");
}
👉 Why?
The entire function is hoisted, so it can be called before it appears in the code.

4. Function Expressions Are NOT Hoisted
If you assign a function to a variable (var, let, const), the function is not hoisted.
greet(); // TypeError: greet is not a function

var greet = function () {
  console.log("Hello!");
};
👉 Why?
Only var greet; is hoisted, but the function assignment (greet = function() {...}) happens later.



Type    	Hoisted?          Initialized?          	Usable before declaration?
var	        ✅ Yes	        ✅ Yes (undefined)	    ✅ Yes (but undefined)
let 	    ✅ Yes	        ❌ No (TDZ error)	    ❌ No
const	    ✅ Yes	        ❌ No (TDZ error)	    ❌ No
Fun Decla	✅ Yes           ✅ Yes	                ✅ Yes
Express(var)✅ Yes	        ❌ No	                ❌ No (TypeError)

------------------------------------------------------------------------------------------------------------------

18. What is the difference between `let`, `const`, and `var`?  
Ans-> var:
Scope: Function-scoped (or global if declared outside any function). 
Reassignment: Variables declared with var can be reassigned. 
Redeclaration: Variables declared with var can be redeclared within the same scope. 
Hoisting: Variables declared with var are hoisted, meaning they are moved to the top of their scope during execution, but initialized with undefined. 

let:
Scope: Block-scoped (meaning it's only accessible within the block of code where it's declared, such as inside an if statement, for loop, or function). 
Reassignment: Variables declared with let can be reassigned. 
Redeclaration: Variables declared with let cannot be redeclared within the same block. 
Hoisting: Variables declared with let are hoisted, but accessing them before declaration results in a ReferenceError (they are in a "temporal dead zone"). 

const:
Scope: Block-scoped. 
Reassignment: Variables declared with const cannot be reassigned after initialization. 
Redeclaration: Variables declared with const cannot be redeclared within the same block. 
Hoisting: Variables declared with const are hoisted, but accessing them before declaration results in a ReferenceError (they are in a "temporal dead zone"). 

------------------------------------------------------------------------------------------------------------------

19. What is `"use strict"` in JavaScript?  
------------------------------------------------------------------------------------------------------------------

20. What is event bubbling and event capturing?
------------------------------------------------------------------------------------------------------------------

21. What are primitive data types in JavaScript?  
------------------------------------------------------------------------------------------------------------------

22. What is the difference between synchronous and asynchronous tasks?  
------------------------------------------------------------------------------------------------------------------

23. What are the different types of popup boxes in JavaScript? 
Ans-> Alert (alert()) – Displays a message with an OK button. Used for notifications or warnings.
Confirm (confirm()) – Shows a message with OK and Cancel buttons. Used to confirm user actions (returns true or false).
Prompt (prompt()) – Displays a message with a text input field and OK and Cancel buttons. Used to take user input (returns input value or null). 

------------------------------------------------------------------------------------------------------------------

24. What happens if an infinite `while` loop runs in JavaScript?  
Ans-> Browser Environment:
An infinite loop will likely freeze the browser tab or the entire browser application. The browser may become unresponsive, and the user might have to force-close it. Some browsers might detect the infinite loop and display a dialog box asking the user to stop the script.
Node.js Environment:
In Node.js, an infinite loop will block the event loop, preventing other tasks from being executed. This can lead to the application becoming unresponsive and potentially crashing if it consumes too many resources.

------------------------------------------------------------------------------------------------------------------
25. List some common mouse events in JavaScript.
Ans-> click	Single mouse click
dblclick	Double-click event
mousedown	Mouse button pressed
mouseup	    Mouse button released
mousemove	Mouse moving over an element
mouseenter	Mouse enters an element (does not bubble)
mouseleave	Mouse leaves an element (does not bubble)
mouseover	Mouse moves over an element (bubbles)
mouseout	Mouse leaves an element (bubbles)
contextmenu	Right-click event
------------------------------------------------------------------------------------------------------------------

26. what is temporal dead zone? 
Ans-> The temporal dead zone (TDZ) is a specific period in the execution of JavaScript code where variables declared with let and const exist but cannot be accessed or assigned any value. During this phase, accessing or using the variable will result in a ReferenceError.

------------------------------------------------------------------------------------------------------------------
27. Js is strictly type or loose type language? 
Ans-> JavaScript is a loosely typed (or dynamically typed) language. You don't have to specify the data type of a variable when declaring it. A variable's type can change at runtime.
------------------------------------------------------------------------------------------------------------------

28. What is different between reference error type error and syntax error
Ans-> ReferenceError	When accessing a variable that is not declared or out of scope.
TypeError	When performing an invalid operation on a variable of a specific type.
SyntaxError	When there is an invalid JavaScript syntax that prevents the code from executing
------------------------------------------------------------------------------------------------------------------
29. Are let and const hosted?
Ans-> Yes, in JavaScript, both let and const declarations are hoisted, meaning the JavaScript engine is aware of them at the top of their scope, but they are not initialized until their declaration is reached. This creates a "temporal dead zone" where attempting to access them before their declaration results in a ReferenceError  
------------------------------------------------------------------------------------------------------------------
30. What is a Block in JavaScript?
A block in JavaScript is a section of code enclosed within curly braces {}. It is used to group multiple statements together.
------------------------------------------------------------------------------------------------------------------
31. What are arrow functions?
Ans-> Arrow functions in JavaScript are a shorter and more concise way to write functions. They were introduced in ES6 (ECMAScript 2015) and provide a more compact syntax compared to traditional function expressions.
------------------------------------------------------------------------------------------------------------------

What is the difference between == and ===?
Ans-> == (loose equality) compares values only, allowing type conversion if needed.
=== (strict equality) compares both value and data type, without type conversion.
------------------------------------------------------------------------------------------------------------------

Explain the difference between forEach, map, filter, and reduce.
Ans-> forEach() – Executes a Function for Each Element
    Used only for iterating over an array.
    Does not return a new array; modifies the original array if needed.
    Does not support chaining.
    arr.forEach(num => console.log(num * 2));

map() – Transforms Each Element & Returns a New Array
Creates a new array by applying a function to each element.
Does not modify the original array.
Supports chaining.
let doubled = numbers.map(num => num * 2);

filter() – Returns a New Array with Matching Elements
Creates a new array with elements that pass a condition.
Does not modify the original array.
let evenNumbers = numbers.filter(num => num % 2 === 0);

reduce() – Reduces an Array to a Single Value
Applies a function to reduce the array to a single value.
Can be used for sum, product, finding max/min, etc..
let sum = numbers.reduce((acc, num) => acc + num, 0);

------------------------------------------------------------------------------------------------------------------
How does the typeof operator work?
Ans-> The typeof operator in JavaScript is used to determine the data type of a given value or variable. It returns a string representing the type of the operand.

------------------------------------------------------------------------------------------------------------------
What is the difference between function declaration and function expression?
Ans-> Function Declaration
A function declared using the function keyword with a name.
It is hoisted to the top of its scope, meaning it can be called before it is defined in the code.

 Function Expression
A function assigned to a variable.
Not hoisted, meaning it cannot be called before it is defined.
------------------------------------------------------------------------------------------------------------------

Explain event delegation.
------------------------------------------------------------------------------------------------------------------

What is the difference between synchronous and asynchronous code?
Ans -> Synchronous Code:
Code that runs one line at a time, and each step waits for the previous one to finish.
🔹 Asynchronous Code:
Code that can start a task and move on without waiting for it to finish. The result comes later, when it's ready.
------------------------------------------------------------------------------------------------------------------

What are the different ways to clone an object in JavaScript?
Ans-> Shallow Clone
        Object.assign()
          const obj = { a: 1, b: 2 };
          const clone = Object.assign({}, obj);
        Spread Operator (...)
          const obj = { a: 1, b: 2 };
          const clone = { ...obj };
      Deep Clone
          JSON.parse(JSON.stringify(obj))
          const obj = { a: 1, b: { c: 2 } };
          const clone = JSON.parse(JSON.stringify(obj));
      Structured Clone
          const clone = structuredClone(obj);

------------------------------------------------------------------------------------------------------------------

What is destructuring in JavaScript?
Ans-> Destructuring in JavaScript is a way to extract values from arrays or objects and assign them to variables in a clean and simple way.
------------------------------------------------------------------------------------------------------------------

What is the difference between shallow copy and deep copy?
Ans-> Shallow Copy	Deep Copy
      Shallow Copy stores the references of objects to the original memory address.   	
      Deep copy stores copies of the object’s value.

      Shallow Copy reflects changes made to the new/copied object in the original object.	
      Deep copy doesn’t reflect changes made to the new/copied object in the original object.

      Shallow Copy stores the copy of the original object and points the references to the objects.
      Deep copy stores the copy of the original object and recursively copies the objects as well.

      A shallow copy is faster.	
      Deep copy is comparatively slower.
------------------------------------------------------------------------------------------------------------------

What is the prototype chain in JavaScript?
Ans-> in JavaScript, the prototype chain is a mechanism by which objects inherit features (properties and methods) from other objects.
------------------------------------------------------------------------------------------------------------------

How does JavaScript handle memory management and garbage collection?
Ans-> JavaScript uses a garbage collector to automatically manage memory. The garbage collector identifies and frees memory occupied by objects
------------------------------------------------------------------------------------------------------------------

What is debouncing and throttling? Explain with examples.
Ans-> Debouncing and throttling are performance optimization techniques in JavaScript, especially useful when dealing with high-frequency events like scroll, resize, input, or mousemove.

------------------------------------------------------------------------------------------------------------------

Explain the difference between setTimeout and setInterval.
Ans-> setTimeout() and setInterval() are both used to execute a function after a specified delay, but they differ in their behavior: setTimeout() executes the function once after the delay, while setInterval() executes the function repeatedly at the specified interval. 
------------------------------------------------------------------------------------------------------------------

What is the this keyword in JavaScript, and how does it behave in different contexts?
Ans-> The this keyword in JavaScript refers to the current execution context of a function. It can behave differently depending on how a function is called, such as in a method, as a constructor, or as a standalone function.
------------------------------------------------------------------------------------------------------------------

What are generators in JavaScript?
Ans-> Generators in JavaScript are a type of iterable, similar to arrays or sets, but the values ar not computed until you iterate over them. They allow you to write more efficient and memory-friendly code.
------------------------------------------------------------------------------------------------------------------

What is the difference between microtasks and macrotasks?
Ans-> Microtasks are small tasks that are executed by the event loop, such as promise resolution or DOM mutations . Macrotasks are larger tasks, such as setTimeout or setInterval, that are executed by the event loop. Microtasks are executed before macrotasks. 
------------------------------------------------------------------------------------------------------------------

How does JavaScript handle deep comparison of objects?
Ans-> JavaScript uses the === operator to compare objects, which checks for reference equality. To compare objects deeply,
------------------------------------------------------------------------------------------------------------------

What are WeakMap and WeakSet?
Ans-> WeakMap and WeakSet are data structures in JavaScript that allow you to store objects as keys or values , but with a twist: they don’t prevent the garbage collector from collecting the objects, even if they are still referenced elsewhere in the code. This makes them useful for caching and other use cases where you don’t want to prevent objects from being
------------------------------------------------------------------------------------------------------------------

What is the difference between Object.freeze(), Object.seal(), and Object.preventExtensions()?
Ans-> Object.freeze() prevents any modifications to the object, including adding new properties or modifying existing ones. Object .seal() prevents adding new properties but allows modifying existing ones. Object.preventExtensions() prevents adding new properties but allows modifying existing ones. 
------------------------------------------------------------------------------------------------------------------
What is the difference between typeof and instanceof?
Ans-> typeof returns the type of the variable, while instanceof returns true if the variable is an instance of the specified constructor. 
------------------------------------------------------------------------------------------------------------------
How does JavaScript handle type coercion?
Ans-> JavaScript performs type coercion when comparing values of different types, such as numbers and strings. It converts the values to a common type before comparing them. 

------------------------------------------------------------------------------------------------------------------
What are arrow functions, and how do they differ from regular functions?
Ans-> 
------------------------------------------------------------------------------------------------------------------
What is the difference between shallow copy and deep copy?
Ans-> A shallow copy creates a new object and copies the references of the original object, while a deep copy creates a new object and recursively copies the values of the original object.
------------------------------------------------------------------------------------------------------------------

How do you clone an object in JavaScript?
Ans-> You can use the spread operator (…) to clone an object, or use the JSON.parse(JSON.stringify (obj)) method. 
------------------------------------------------------------------------------------------------------------------

What are getters and setters in JavaScript?
Ans-> Getters and setters are methods that allow you to access and modify the value of a property. Get terms are used to get the value of a property, while setters are used to set the value of
------------------------------------------------------------------------------------------------------------------
What is the difference between find() and filter()?
Ans-> find() returns the first element in the array that satisfies the provided testing function, while filter() returns a new array with all elements that satisfy the provided testing function. 
------------------------------------------------------------------------------------------------------------------

What is the difference between push() and unshift()?
Ans-> push() adds an element to the end of the array, while unshift() adds an element to the beginning of the array.  
------------------------------------------------------------------------------------------------------------------

How do you convert an array-like object to an array?
Ans-> You can use the Array.from() method or the spread operator (…) to convert an array-like object

------------------------------------------------------------------------------------------------------------------

What is the difference between throw and console.error()?
Ans-> throw is used to throw an error, which can be caught by a try-catch block, whill console.error() is used to log an error to the console, but it does not stop the execution of the code. 
------------------------------------------------------------------------------------------------------------------

How does the try...catch statement work in JavaScript?
Ans-> The try...catch statement is used to handle errors in JavaScript. The try block contains the code that may throw an error, and the catch block contains the code that will be executed if an error is thrown. 
------------------------------------------------------------------------------------------------------------------

What is the purpose of finally in a try...catch block?
Ans-> The finally block is used to execute code regardless of whether an error was thrown or not. It is typically used to release resources or perform cleanup tasks. 
------------------------------------------------------------------------------------------------------------------

How can you debug JavaScript code?
Ans-> You can use the browser's developer tools, such as the console, debugger, and network panel, to debug JavaScript code. You can also use tools like Node.js Inspector and Chrome DevTools. 
------------------------------------------------------------------------------------------------------------------

What is the onerror event in JavaScript?
Ans-> The onerror event is a built-in event in JavaScript that is triggered when an error occurs. It can be used to handle errors in a more robust way. 
------------------------------------------------------------------------------------------------------------------
What is the DOM (Document Object Model)?
Ans-> The DOM is a programming interface for HTML and XML documents. It represents the structure of a document as a tree-like data structure, and provides a way to access and modify the document's elements. 
------------------------------------------------------------------------------------------------------------------
How do you select elements in the DOM using JavaScript?
Ans-> You can use the document.querySelector() method or the document.querySelectorAll() method to select elements in the DOM . You can also use the document.getElementById() method to select an element by its ID. 
------------------------------------------------------------------------------------------------------------------

What is the difference between innerHTML, textContent, and innerText?
Ans-> innerHTML sets the HTML content of an element, textContent sets the text content of an element, and innerText sets the text content of an element, but it also removes any HTML tags. 
------------------------------------------------------------------------------------------------------------------

What is localStorage, sessionStorage, and cookies?
Ans-> localStorage, sessionStorage, and cookies are all ways to store data on the client-side. localStorage and sessionStorag are used to store data locally, while cookies are used to store data on the server-side. 
------------------------------------------------------------------------------------------------------------------

How do you dynamically add elements to the DOM?
Ans-> You can use the document.createElement() method to create a new element, and then use the appendChild () method or the insertBefore() method to add it to the DOM. 
------------------------------------------------------------------------------------------------------------------
What is the difference between requestAnimationFrame and setTimeout?
Ans-> requestAnimationFrame is used to schedule a function to be called before the next repaint, while setTimeout is used to schedule a function to be called after a certain amount of time. 
------------------------------------------------------------------------------------------------------------------
How do you optimize loops in JavaScript?
Ans-> You can use the for...of loop or the for...of loop with a map to optimize loops in JavaScript. You can also use the Array.prototype.forEach() method to iterate over a array. 

------------------------------------------------------------------------------------------------------------------
How do you improve JavaScript execution speed?
Ans-> You can use the following techniques to improve JavaScript execution speed: 

------------------------------------------------------------------------------------------------------------------
What are memory leaks in JavaScript, and how can you prevent them?
Ans-> Memory leaks occur when a web page consumes increasing amounts of memory over time, causing the browser to slow down or even crash. You can prevent memory leaks by avoiding circular references, using weak references, and properly cleaning up event listeners. 

------------------------------------------------------------------------------------------------------------------
What are template literals in JavaScript?
Ans-> Template literals are a new way of creating strings in JavaScript. They allow you to embed expressions inside string literals using the backtick character. 

------------------------------------------------------------------------------------------------------------------
What is destructuring in JavaScript?
Ans-> Destructuring is a feature in JavaScript that allows you to extract values from arrays or objects and assign them to variables. 
------------------------------------------------------------------------------------------------------------------

What are default parameters in JavaScript functions?
Ans-> Default parameters are a feature in JavaScript that allows you to specify a default value for a function parameter if it is not provided. 
------------------------------------------------------------------------------------------------------------------

What are the rest and spread operators (...)?
Ans-> The rest operator is used to capture all the remaining elements of an array or object into a single array or object. The spread operator is used to expand an array or object into individual elements. 
------------------------------------------------------------------------------------------------------------------

What are JavaScript modules (import and export)?
Ans-> JavaScript modules are a way to organize and reuse code in JavaScript. They allow you to import and export functions, variables, and classes. 
------------------------------------------------------------------------------------------------------------------