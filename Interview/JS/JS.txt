
    Basics
1. What is JavaScript?  
2. How does a browser execute JavaScript?  
3. What are the features of JavaScript?  
4. What is the DOM (Document Object Model)?  

    Events and Functions
5. How do you perform a click event in JavaScript?  
6. What are `alert()` and `confirm()` functions?  
7. What is the difference between `undefined` and `null`?  
8. What is the difference between `==` and `===`?  
9. What is a function? Can we overload functions in JavaScript?  
10. What is a callback function?  

    Asynchronous JavaScript
11. What is a promise? What are the advantages of promises over callbacks?  
12. What is callback hell?  
13. What is `async` and `await`? How do you use them?  

    Scope and Closures
14. What is a closure?  
15. What is an Immediately Invoked Function Expression (IIFE)?  
16. What is an anonymous function?  

    Hoisting & Variable Declaration
17. Explain variable hoisting in JavaScript.  
18. What is the difference between `let`, `const`, and `var`?  
19. What is `"use strict"` in JavaScript?  

    Event Handling
20. What is event bubbling and event capturing?  

    Data Types and Operators
21. What are primitive data types in JavaScript?  
22. What is the difference between synchronous and asynchronous tasks?  

    Browser and Popups
23. What are the different types of popup boxes in JavaScript?  
24. What happens if an infinite `while` loop runs in JavaScript?  

    DOM Events & Execution
25. List some common mouse events in JavaScript.  
26. How do you get the last index of a string in JavaScript?  
27. What is negative infinity in JavaScript?  

---

## **Node.js Questions

    Introduction & Basics
28. What is Node.js?  
29. What are the advantages of Node.js over Java and PHP?  
30. What are the limitations of Node.js?  
31. How is Node.js single-threaded?  

    Modules & Packages
32. What are modules in Node.js?  
33. What is `module.exports`?  
34. How do you create a simple server in Node.js?  
35. What are built-in modules in Node.js?  

    Concurrency & Execution
36. How does Node.js handle multiple requests?  
37. What is the event loop in Node.js?  
38. What is the difference between `process.nextTick()` and `setImmediate()`?  

    File System & Streams
39. What is the file system module (`fs`) in Node.js?  
40. What are streams in Node.js? What are their types?  
41. What are pipe streams in Node.js?  

    Networking & APIs
42. What are HTTP request methods in Node.js?  
43. What is the difference between `GET` and `POST` requests?  
44. What is a query string and how do you send data in a `GET` request?  

    Middleware & Express.js
45. What is middleware in Node.js?  
46. What are the types of middleware in Express.js?  
47. Does the order of middleware matter in Express.js?  
48. What is Express.js?  
49. What are the features of Express.js?  
50. Why do we use Express.js?  
51. What is the difference between Express.js and Node.js?  

    Package Management
52. What is `package.json` and `package-lock.json`?  
53. What is `npm`? How do you install dependencies at the application and environment levels?  
54. How do you manage packages in a Node.js project?  

    Advanced Topics
55. What is REPL in Node.js?  
56. What is an `EventEmitter` in Node.js?  
57. What is a thread pool in Node.js?  
58. What is the purpose of `NODE_ENV`?  
59. How do you connect a MongoDB database to a Node.js application?  
60. What is scaffolding in Express.js?  
