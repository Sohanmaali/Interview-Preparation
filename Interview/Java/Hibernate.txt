1) What is Hibernate?
Ans. -> Hibernate is an object-relational mapping (ORM) framework. that is used to store, manipulate, and retrieve data from the database.

2) What is ORM?
Ans. ->ORM stands for Object-Relational Mapping (ORM) is a technique that allows developers to interact with a relational database using object-oriented programming languages. It converts mapping classes to database tables and objects to rows, so developers can manipulate database records using code without writing SQL queries.

3) What does an ORM solution comprises of?
Ans. ->	Object-Relational Mapping (ORM): Hibernate maps Java classes to database tables and Java data types to SQL data types. This allows developers to work with objects and collections directly.

		Database Independence: Hibernate provides a layer of abstraction over the database, enabling applications to be database-agnostic. You can switch between different databases without changing the code.

		Automatic SQL Generation: Hibernate automatically generates SQL queries based on the mapping and operations performed on the Java objects. This reduces the need for manual SQL writing.

		Transaction Management: Hibernate integrates with Java's transaction management and ensures that data integrity is maintained through proper transaction handling.

		Lazy Loading: Hibernate supports lazy loading, which means it loads data only when it is actually needed, thus improving performance.

		Caching: Hibernate provides a caching mechanism that reduces database access and improves application performance.

		Query Language (HQL): Hibernate provides its own query language (Hibernate Query Language or HQL) which is similar to SQL but operates on the object level.

		Annotations and XML Configuration: Hibernate supports both XML configuration and JPA (Java Persistence API) annotations for mapping classes to database tables.

		Criteria API: Hibernate provides a Criteria API for building queries in a programmatic and type-safe way.

4) What are the different levels of ORM quality?
There are four levels defined for ORM quality.
i. Pure relational
ii. Light object mapping
iii. Medium object mapping
iv. Full object mapping

5) What is a pure relational ORM?
The entire application, including the user interface, is designed around the relational model and SQL-based relational operations.

6) What is a meant by light object mapping?

7) What is a meant by medium object mapping?


8) What is meant by full object mapping?


9) What are the benefits of ORM and Hibernate?
Ans. -> Code Readability : Write code in your preferred language (Python, Java, etc.) without worrying about database details.
							This makes the code more readable and easier to maintain.

		Reduced Development Time : Hibernate automatically maps objects to database tables.
							Reduces the amount of code you need to write and manage, speeding up development.

		Scalability : Hibernate works well in large, scalable environments.
					Suitable for both large-scale applications and smaller in-house systems.

		Caching : Hibernate reduces the number of database queries by using caching.
				Improves application performance.

		Transaction Management : Hibernate ensures data integrity and consistency in multi-user environments.
				Manages transactions automatically.
		
		Persistence : Data managed by Hibernate will outlive the application process, ensuring long-term storage.

10) How does hibernate code looks like?
Ans. -> 
	import org.hibernate.Session;
	import org.hibernate.SessionFactory;
	import org.hibernate.Transaction;
	import org.hibernate.cfg.Configuration;

	public class HibernateExample {
		public static void main(String[] args) {
			Configuration configuration = new Configuration().configure();
			SessionFactory sessionFactory = configuration.buildSessionFactory();
			Session session = sessionFactory.openSession();
			Transaction transaction = session.beginTransaction();
	
			YourEntity entity = new YourEntity();
			entity.setId(1L);
			entity.setName("Example Name");

			session.save(entity);
			transaction.commit();
			session.close();
		}
	}

11) What is a hibernate xml mapping document and how does it look like?
Ans. -> Hibernate Mapping Files is an XML file that specifies the mapping between POJO classes and database tables and between POJO class variables and table columns. It includes the mapping relationship between the Java class and the database table. It often goes by the name "xx. hbm.

13) What are some of the important interfaces of the Hibernate framework?
Ans. ->	1.SessionFactory: SessionFactory is an Interface which is present in org.hibernate package and it is used to create Session Object. It is 
			immutable and thread-safe in nature.
		2. Session: Session is an interface which is present in org.hibernate package. Session object is created based upon SessionFactory object i.e. 
			factory.
			It opens the Connection/Session with Database software through Hibernate Framework.
			It is a light-weight object and it is not thread-safe.
			Session object is used to perform CRUD operations.
		3. Transaction: Transaction object is used whenever we perform any operation and based upon that operation there is some change in database.
			Transaction object is used to give the instruction to the database to make the changes that happen because of operation as a permanent by using commit() method.
		4. Query: Query is an interface that present inside org.hibernate package.
			A Query instance is obtained by calling Session.createQuery().
			This interface exposes some extra functionality beyond that provided by Session.iterate() and Session.find():
			A particular page of the result set may be selected by calling setMaxResults(), setFirstResult().
			Named query parameters may be used.
		5. Criteria: Criteria is a simplified API for retrieving entities by composing Criterion objects.
			The Session is a factory for Criteria. Criterion instances are usually obtained via the factory methods on Restrictions.

14) What are Callback interfaces?
Ans. -> In Hibernate, callback interfaces are mechanisms that allow you to perform custom actions during different stages of an entity's lifecycle, such as before or after saving, updating, or deleting the entity. These actions are specified using certain methods or annotations that get triggered automatically by Hibernate.

15) What are Extension interfaces?
Ans. -> Extension interfaces in Hibernate are a set of interfaces that allow you to customize and extend the behavior of Hibernate. By implementing these interfaces, you can add custom logic or modify how Hibernate interacts with the database.

16) What are the Extension interfaces that are there in hibernate?
Ans. -> There are many extension interfaces provided by hibernate.
		• ProxyFactory interface - used to create proxies
		• ConnectionProvider interface – used for JDBC connection management
		• TransactionFactory interface – Used for transaction management
		• Transaction interface – Used for transaction management
		• TransactionManagementLookup interface – Used in transaction management.
		• Cahce interface – provides caching techniques and strategies
		• CacheProvider interface – same as Cache interface
		• ClassPersister interface – provides ORM strategies
		• IdentifierGenerator interface – used for primary key generation
		• Dialect abstract class – provides SQL support

17) What are different environments to configure hibernate?
There are mainly two types of environments in which the configuration of hibernate application differs.
i. Managed environment – In this kind of environment everything from database connections, transaction boundaries, security levels and all are defined. An example of this kind of environment is environment provided by application servers such as JBoss, Weblogic and WebSphere. 
ii. Non-managed environment – This kind of environment provides a basic configuration template. Tomcat is one of the best examples that provide this kind of environment.

18) What is the file extension you use for hibernate mapping file?
Ans. -> The name of the file should be like this : filenam.hbm.xml The filename varies here. The extension of these files should be “.hbm.xml”. This is just a convention and it’s not mandatory. But this is the best practice to follow this extension.

20) What is meant by Method chaining?
Ans. -> Method chaining is a common syntax in object-oriented programming languages that allows you to invoke multiple method calls in a single statement. It's also known as method cascading

21) What does hibernate.properties file consist of?

22) What should SessionFactory be placed so that it can be easily accessed?

23) What are POJOs?
Ans. -> POJO stands for plain old java objects. These are just basic JavaBeans that have defined setter and getter methods for all the properties that are there in that bean. Besides they can also have some business logic related to that property. Hibernate applications works efficiently with POJOs rather then simple java classes.

24) What is object/relational mapping metadata?
Ans. -> Object/relational mapping (ORM) metadata is information that defines how Java objects (classes) map to database tables. It specifies how class fields map to table columns and how relationships between classes are represented in the database. This metadata can be provided using annotations in the Java code or XML configuration files.

25) What is HQL?
Hibernate Query Language (HQL) is a powerful, object-oriented query language used in Hibernate, a popular Java-based ORM framework. HQL is similar to SQL but is designed to work with Hibernate's data objects, allowing developers to write queries against the object model rather than the database tables directly.

26) What are the different types of property and class mappings?
Ans. ->

27) What is Attribute Oriented Programming?
Ans. -> Attribute-Oriented Programming (AOP) is a programming style where attributes (or annotations) are used to add metadata to code elements (like classes, methods, and fields). This metadata can be used to influence the behavior or configuration of the program, often without changing the actual code.


29) What are the different approaches to represent an inheritance hierarchy?
i. Table per concrete class.
ii. Table per class hierarchy.
iii. Table per subclass.

30) What are managed associations and hibernate associations?
Associations that are related to container management persistence are called managed associations. These are bi-directional associations. Coming to hibernate associations, these are unidirectional.

31. What are the most commonly used annotations available to support hibernate mapping?
Ans. -> Entity: This annotation is used on the model classes by using “@Entity” and tells that the classes are entity beans.
	
	Table: This annotation is used on the model classes by using “@Table” and tells that the class maps to the table name in the database.
	
	Access: This is used as “@Access” and is used for defining the access type of either field or property. When nothing is specified, the default value taken is “field”.
	
	Id: This is used as “@Id” and is used on the attribute in a class to indicate that attribute is the primary key in the bean entity.
	
	EmbeddedId: Used as “@EmbeddedId” upon the attribute and indicates it is a composite primary key of the bean entity.
	
	Column: “@Column” is used for defining the column name in the database table.
	
	GeneratedValue: “@GeneratedValue” is used for defining the strategy used for primary key generation. This annotation is used along with GenerationType enum.
	
	OneToOne: “@OneToOne” is used for defining the one-to-one mapping between two bean entities. Similarly, hibernate provides OneToMany, ManyToOne and ManyToMany annotations for defining different mapping types.
	org.hibernate.annotations.Cascade: “@Cascade” annotation is used for defining the cascading action between two bean entities. It is used with org.hibernate.annotations.CascadeType enum to define the type of cascading.
	
What is the difference between save and persist in Hibernate?
Ans. -> save
		Used to save an object to the database.
		Returns the generated primary key (if applicable).
		If the object already exists (has an identifier), updates the corresponding database row.
		
		persist
		Makes a transient object persistent.
		Doesn't guarantee immediate assignment of identifier value (happens at flush time).
		Doesn't return anything (void method).
		Has no effect if the object is already persistent.
	
What is the difference between get() and load() methods in Hibernate?
Ans. -> get():
		1) Returns null if object is not found.
		2) get() method always hit the database.
		3) It returns real object not proxy.
		4) It should be used if you are not sure about the existence of INSTANCE.
		
		load():
		1) Throws ObjectNotFoundException if object is not found.
		2) load() method doesn't hit the database.
		3) It returns proxy object.
		4) It should be used if you are sure that instance exists.
	
What are the major advantages of Hibernate Framework? 
Ans. -> It is open-sourced and lightweight.
		Performance of Hibernate is very fast.
		Helps in generating database independant queries.
		Provides facilities to automatically create a table.
		It provides query statistics and database status.
		
		
Difference between the first and second level cache in Hibernate? 
Ans. -> The first-level cache is maintained at Session level 
		while the second level cache is maintained at a SessionFactory level and is shared by all sessions.
		
			
		It is enabled by default.
		It is not enabled by default.
		
		It is available for a session 
		It is available across all session.
		
		No Extra configuration required
		We have to decide  which concurrency strategy to use and also need to configure cache expiration and physical cache attributes.

Difference between the transient, persistent and detached state in Hibernate?
Ans. -> Transient state: New objects are created in the Java program but are not associated with any Hibernate Session.

		Persistent state: An object which is associated with a Hibernate session is called Persistent object. While an object which was earlier associated with Hibernate session but currently it’s not associate is known as a detached object. You can call save() or persist() method to store those object into the database and bring them into the Persistent state.
		
		Detached state: You can re-attach a detached object to Hibernate sessions by calling either update() or saveOrUpdate() method.
		
What are the different functionalities supported by Hibernate?
Ans. -> Hibernate is an ORM tool.
		Hibernate uses Hibernate Query Language(HQL) which makes it database-independent.
		It supports auto DDL operations.
		This Java framework also has an Auto Primary Key Generation support.
		Supports cache memory.
		Exception handling is not mandatory in the case of Hibernate.
		
How to achieve mapping in Hibernate?
Ans. -> One-to-One associations
		Many-to-One associations
		Many-to-Many associations
		
When do you use merge() and update() in Hibernate?
Ans. -> update(): If you are sure that the Hibernate Session does not contain an already persistent instance with the same id .
		merge():  Helps in merging your modifications at any time without considering the state of the Session.
		
What’s the difference between session.save() and session.saveOrUpdate() methods in hibernate?
Ans. -> Session.save() method saves a record only if it’s unique with respect to its primary key and will fail to insert if primary key already exists 
		in the table.
		saveOrUpdate() method inserts a new record if primary key is unique and will update an existing record if primary key exists in the table already.
		
What is transient instance state in Hibernate?
Ans. -> If an instance is not associated with any persistent context and also, it has never been associated with any persistent context, then it’s said to be in transient state.

What type of methods in therapy sessions exist?
Among the call transaction and session method, which is faster?
What is the difference between a connection and a session?
How is a session maintained?
Ans. -> Sessions are maintained automatically by a session cookie that is sent to the client when the session is first created.

What is the difference between session.save() and session.flush() in hibernate?

What are the advantages of Hibernate over JDBC?
Ans. ->	Database independence - Hibernate is database-independent, so the same code can work for many databases with only minor changes. In contrast, JDBC is database-dependent and requires different code for different databases.
		
		Exception management - Hibernate manages exceptions by marking them as unchecked, while JDBC code needs to be written in a try-catch databases block.
		
		Object-oriented programming - Hibernate allows developers to code Java applications based on object-oriented principles and best practices, without worrying about database semantics. This can speed up development, especially for developers who aren't familiar with SQL and relational databases.
		
		Higher-level API - Hibernate abstracts JDBC and provides a higher-level API for developers.
		
		Automated database access - Hibernate automates many aspects of database access, while JDBC is more manually code-intensive.
		
		Associations - Hibernate makes it easier to create associations between relations, such as one-to-one, one-to-many, many-to-one, and many-to-many, using annotations. 

What is a Session in Hibernate?
Ans. -> A session is an object that maintains the connection between Java object application and database. Session also has methods for storing, retrieving, modifying or deleting data from database using methods like persist(), load(), get(), update(), delete(), etc. Additionally, It has factory methods to return Query, Criteria, and Transaction objects.

What is a SessionFactory?
Ans. -> SessionFactory provides an instance of Session. It is a factory class that gives the Session objects based on the configuration parameters in order to establish the connection to the database. As a good practice, the application generally has a single instance of SessionFactory. The internal state of a SessionFactory which includes metadata about ORM is immutable, i.e once the instance is created, it cannot be changed.
This also provides the facility to get information like statistics and metadata related to a class, query executions, etc. It also holds second-level cache data if enabled.
========================================================================================================================
4. Explain architecture of Hibernate?

5. What are some core interfaces of hibernate?
Ans. -> Session
SessionFactory
Configuration
Transaction
Query and Criteria interface.

6. Explain brief about Session interface used in hibernate?
Ans. -> The Session interface in Hibernate is a central API that provides a bridge between the application and the database. It is used to interact with the database by performing CRUD (Create, Read, Update, Delete) operations. Here’s a brief overview

7. Are session objects thread safe?
Ans. -> Session objects are not thread safe and need to be used in single thread. Every thread should have their own session object and close it once it is done with the work.

8. Explain brief about SessionFactory object used in hibernate?
Ans. -> SessionFactory is heavy weight object and it should be created one per database. SessionFactory object is shared by multiple sessions.

9. What is Configuration class in hibernate?
Ans. -> Configuration class is used to load required hibernate configuration. It is used to bootstrap hibernate and it is used to locate to hibernate mapping file.

10. Explain brief about Criteria API in Hibernate?
Ans. -> The Criteria API in Hibernate is a powerful, flexible, and type-safe way to create and execute database queries programmatically. It allows developers to build complex queries using Java objects and methods, without writing raw SQL, making the code more readable and maintainable.

11. Explain brief about Query interface in Hibernate?
Ans. -> Query interface is object oriented representation of Hibernate Query. You can get query object bu calling Session.createQuery() method.
		Here is simple example to execute Native query using Query APIs.
	
	SQLQuery query = session.createSQLQuery("select name, age from Employee");
	List<Object[]> rows = query.list();
	for(Object[] row : rows){
		Employee e = new Employee();
		e.setName(row[0].toString());
		e.setAge(Integer.parseInt(row[1].toString()));
		System.out.println(e);
	}

12. What are differences between openSession and getCurrentSession in hibernate?
Ans. -> Parameter								openSession      						getCurrentSession
		Session object					It always create new Session object     	It creates a new Session if not exists , 
																					else use same session which is in current hibernate context
	
	Flush and close					You need to explicitly flush and 
										close session objects						You do not need to flush and close session objects,
																					it will be 	automatically taken care by Hibernate internally
	Performance						In single threaded environment , 
									It is slower than getCurrentSession				In single threaded environment , It is faster than getOpenSession

	Configuration					You do not need to configure any 
									property to call this method					You need to configure additional property 
																					“hibernate.current_session_context_class” to call getCurrentSession method, otherwise it will throw exceptions.


13. What are differences between get and load methods in hibernate?
Ans. -> Parameter									get													load
		Database retrieval					It always hits the database								It does not hit database
	
		If null								If it does not get the object with id, 					If it does get the object with id, it throws 
											it returns null 										ObjectNotFoundException
		
		Proxy 								It returns real object									It returns proxy object
		
		Use									If you are not sure if object with id 					If you are sure about existence of object,
											exists or not, you can use get							you can use load
 

14. Can you declare Entity class as final in hibernate?
Ans. -> Yes, you can declare entity class as final but it is not considered as a good practice because hibernate uses proxy pattern for lazy initialisation, If you declare it as final then hibernate won’t be able to create sub class and won’t be able to use proxy pattern, so it will limit performance and improvement options.

15. Differentiate between first level cache and second level cache?		
Ans. -> Parameter								First level Cache										Second level Cache
		Association						It is associated at Session level.				It is associated at SessionFactory level and is 
																						generally exists one per application.
		Default							It is enabled by default						It is not enabled by default, you need to enable it explicitly

16. What are states of object in hibernate?
Ans. -> Transient : If object is in transient state, it means it was never associated with session and just created.
		Persistent :  If object is in persistent state, it means it is associated with session and you just saved or retrieved object from database.
		Detached : If object is in detached state, it means session is closed and object is no more part of session. If you call merge or update, object goes back to persistent state.

17. Does entity class in hibernate require no arg constructor?
Ans. -> Yes, Entity class in hibernate requires no arg constructor because Hibernate use reflection to create instance of entity class and it mandates no arg constructor in Entity class.

19. What are differences between save and saveOrUpdate method of session object?
Ans. -> save(): stores object in database. It generates identifier for tQhe object and returns it. If object already exists in database, it will throw an error.
saveOrUpdate(): SaveOrUpdate method save the object if identifies does not exist. If it exists , it calls update method.

20. What are two types of Collections in hibernate?
Ans. -> Sorted Collection
		Ordered Collection
		
21. What are differences between sorted and ordered collection in hibernate?
Ans. -> Parameter											Sorted Collection								Ordered Collection
		Sorting						Sorted collection uses java’s sorting API							Ordered Collections uses order by 
									 to sort the collection.											clause while retrieval of objects
		Default 					It is enabled by default							It is not enabled by default, you need to enable it explicitly


22. What is lazy loading in hibernate?
Ans. -> It is used for performance improvement. Lazy loading means when you load parent, child objects won’t get loaded until requested. Infact hibernate loads child objects automatically when you access them. It improves performance as you are not loading whole object at once.

23. What is LazyInitializationException in Hibernate? Why do you get it?
Ans. -> This exception generally occurs when you use lazy loading and child objects are accessed after closing session.
That’s all about hibernate interview questions.

24. What are different collection types available in hibernate?
Ans. -> There are 5 collection types available in Hibernate for one to many relationship mappings.
		Bag
		Set
		List
		Map
		Array

25. How can you log sql queries executed by Hibernate?
Ans. -> You can set hibernate.show_sql to true for logging sql queries in Hibernate configuration file.
		<property name="hibernate.show_sql">true</property>

26. Can you execute native sql in hibernate?
Ans. -> Yes, you can use execute native sql with the help of SQLQuery object in Hibernate.

// Crate session object
SessionFactory sf = HibernateUtil.getSessionFactory();
Session session = sf.getCurrentSession();

// Get list of employees with help of SQLQuery.
Transaction tx = session.beginTransaction();
SQLQuery sqlQuery = session.createSQLQuery("select id, name, age from Employee");
List<Object[]> rows = sqlQuery.list();
for(Object[] row : rows){
    Employee employee = new Employee();
    employee.setId(Long.parseLong(row[0].toString()));
    employee.setName(row[1].toString());
    employee.setAge(Integer.parseInt(row[2].toString()));
    System.out.println(employee);
}

28. How to make an class immutable in Hibernate?
Ans. -> You can mark class as mutable=false and the class will become immutable.

29. What is autamatic dirty checking in Hibernate?
Ans. -> if object is modified in the transaction, then its state will be updated automatically when you committ the transaction.

Here is an example:

 
SessionFactory factory = cfg.buildSessionFactory();
Session session = factory.openSession();
Transaction tx=session.beginTransaction();
 
Employee e1 = (Employee) session.get(Employee.class, Integer.valueOf(10001));
 
e1.setAge(32);
 
tx.commit();
session.close();

30. What do you understand by Hibernate tuning?
Ans. -> Hibernate tuning is process of optimizing performance of Hibernate application.
Some of the performance tuning strategies are:
Data Caching
Session management
SQL optimization

31. What types of joins can you use in Hibernate?
Ans. -> There are multiple ways to use join in Hibernate.

Using relationships such as one-to-one, one-to-many or many-to-many
Using joins in native SQL query
Using joins in HQL

32. What is dialect in Hibernate?
Ans. -> Dialect specifies type of database used in Hibernate, so that Hibernate can generate type of SQL statements.
For example:
Dialect for mysql database: org.hibernate.dialect.MySQL5Dialect
Dialect for sqlserver database: org.hibernate.dialect.SQLServer2005Dialect

33. Can you share some of the databases supported by Hibernate?
Ans. -> MySQL
SQLServer
PostgreSQL
FrontBaase
Oracle
Sybase SQL Server

34. What is Named queries in Hibernate?
Ans. -> Named queries helps you to group HQL/SQL statements at single location. You can refer it by name in code when you want to use them. It helps you to avoid code mess that can happend because of scattered queriest through the project.

35. What is Query cache in Hibernate?
Ans. -> If you have queries that run over and over again,with same parameters, then query caching can you performance improvements in the application.

Benifit from caching query results is very limited and dependent on the usage of the application. This is reason Hibernate disables query level cache by default.

To enable, you need to do following:

Set hibernate.cache.use_query_cache in hibernate config file.
 
 <property name="hibernate.cache.use_query_cache">true</property>
 
You need to enable query cache for specific queries. Here is an example:
 
List<Employees> employee = session.createQuery("from Employee e where e.name = :name")
        .setEntity("employee", employee)
        .setMaxResults(15)
        .setCacheable(true)
        .setCacheRegion("employeeReg")
        .list();

36. What are benefits of Criteria API in Hibernate?
Ans. -> Criteria API can be used to fetch entity from database using object oriented apporach.
Here are the advantages of criteria APIs.

Criteria API is cleanm nice and Object oriented API.
Criteria API provides Projection that can be used for aggregate functions like sum(), min() etc.
You can write more flexible and dynamic queries as compared to HQL.
It has addOrder() method which can be used for ordering the results.

37. What is cascading in Hiberante and can you list types of cascading?
38. How to integrate log4j with Hibernate?
Ans. -> Add log4j dependencies for maven project. If it is not maven project, then add required log4j jars to classpath.
Create [log4j.xml](https://java2blog.com/log4j-xml-configuration-example/ “log4j.xml”) or log4j.properties and put in the classpath.
Use DOMConfigurator or PropertyConfigurator to configure log4j in static block for standalone application. If you have web application, then you can use ServletContextListener to configure it.

39. What is hibernate configuration file?
Ans. -> Hibernate configuration file contains database configurations such as database url, username, password and dialect etc and is used to initialize SessionFactory. It also contains mapping files and entity class details.

40. Can you list down important annotations used for Hibernate mapping?
Ans. -> 

41. What are the design patterns used in Hibernate?
Ans. -> Proxy pattern for lazy loading
Factory pattern in SessionFactory
Query object for Criteria API
Data Mapper: A pattern in which layer of matters that flows data between object and databases while keeping them independent of each other
Domain Model pattern: An object model of the domain that incorporates both data and behavior.
