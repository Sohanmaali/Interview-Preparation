What is Socket.IO, and how does it work?
Ans -> Socket.IO is a JavaScript library that enables real-time, bi-directional communication between the client and server.

It works over WebSockets but also provides fallback options (like long polling) when WebSockets are not available.

------------------------------------------------------------------------------------------------------------------

What is the difference between WebSockets and Socket.IO?
Ans -> WebSockets (Native)
Protocol: A browser API/protocol (ws://)
Low-level: You manually manage connection, reconnection, message format, etc.
No built-in features like rooms, broadcasting, etc.
No fallback – if WebSocket fails, connection is lost.
Works only over WebSocket-supported networks.

✅ Socket.IO
Library built on top of WebSockets (and other transports like polling).
High-level: Comes with many built-in features:
Automatic reconnection
Broadcasting
Rooms & namespaces
Event-based communication
Fallbacks (polling if WebSocket fails)

------------------------------------------------------------------------------------------------------------------

How do you install and set up Socket.IO in a Node.js application?
------------------------------------------------------------------------------------------------------------------

Explain the basic flow of a Socket.IO connection.
------------------------------------------------------------------------------------------------------------------

What are events in Socket.IO, and how do you emit and listen for them?
Ans -> Events are custom names used to send and receive data between client and server.
Socket.IO uses an event-driven model, just like addEventListener in browsers.
------------------------------------------------------------------------------------------------------------------

How do you send and receive messages using Socket.IO?
------------------------------------------------------------------------------------------------------------------

What are namespaces in Socket.IO, and why are they used?
Ans -> Namespaces are separate communication channels on the same Socket.IO server.

They allow you to split the connection into multiple logical endpoints.

Each namespace has its own event handlers and clients.

✅ Why use Namespaces?
To organize your code and separate concerns.

To reduce unnecessary data sent to clients who don’t need it.

To manage different parts of an app independently (e.g., /chat, /news).

------------------------------------------------------------------------------------------------------------------

What are rooms in Socket.IO? How do they differ from namespaces?
Ans -> Rooms are groups within a namespace that allow you to send messages to a selected group of clients.

------------------------------------------------------------------------------------------------------------------

How do you disconnect a client from a Socket.IO server?
------------------------------------------------------------------------------------------------------------------

What are the transport methods used by Socket.IO?
Ans -> Socket.IO uses two main transport methods to send and receive data between the client and server:

WebSockets
A full-duplex, real-time connection.
Preferred and most efficient transport.
Used if the browser and network support it.

HTTP Long Polling
A fallback method.
Client sends a request and waits for server response.
Used when WebSocket is not supported.

------------------------------------------------------------------------------------------------------------------
what is server side events?
------------------------------------------------------------------------------------------------------------------
client side events?
------------------------------------------------------------------------------------------------------------------
how to create or use namespaces?
Ans -> A Namespace is a separate communication channel in Socket.IO.
It helps organize your sockets — like having different sections in your app (/chat, /admin, etc.).

const io = require('socket.io')(3000);

// Create a namespace: /chat
const chatNamespace = io.of('/chat');

chatNamespace.on('connection', (socket) => {
  console.log('User connected to /chat');

  socket.on('chatMessage', (msg) => {
    console.log('Message:', msg);
    // send to everyone in /chat
    chatNamespace.emit('chatMessage', msg);
  });
});

// Create another namespace: /admin
const adminNamespace = io.of('/admin');

adminNamespace.on('connection', (socket) => {
  console.log('Admin connected');
});

------------------------------------------------------------------------------------------------------------------
What are Events?
------------------------------------------------------------------------------------------------------------------
What are the pre reserved events of socket io?
------------------------------------------------------------------------------------------------------------------
how to create a custome event?
Ans -> A custom event is a user-defined event name you create to send and receive data between the client and server.
------------------------------------------------------------------------------------------------------------------ 

How do you broadcast a message to all connected clients?
------------------------------------------------------------------------------------------------------------------

How can you send a message to specific clients using Socket.IO?
------------------------------------------------------------------------------------------------------------------

Explain the difference between:

socket.emit()

socket.broadcast.emit()

io.emit()

io.to(room).emit()
------------------------------------------------------------------------------------------------------------------

How can you handle reconnections in Socket.IO?
Ans ->  Automatic Reconnection (Client-Side)
By default, Socket.IO automatically tries to reconnect if the connection drops.
You can configure reconnection options when creating the client socket:
const socket = io('http://localhost:3000', {
  reconnection: true,          // Enable auto reconnection (default: true)
  reconnectionAttempts: 5,     // Max number of reconnection attempts (default: Infinity)
  reconnectionDelay: 1000,     // Initial delay between attempts in ms
  reconnectionDelayMax: 5000,  // Max delay between attempts in ms
  timeout: 20000,              // Timeout before a connection attempt fails
});
------------------------------------------------------------------------------------------------------------------

How do you implement error handling in Socket.IO?
------------------------------------------------------------------------------------------------------------------

How can you pass data when a user connects to a Socket.IO server?
------------------------------------------------------------------------------------------------------------------

How do you authenticate a user before allowing a Socket.IO connection?
Ans -> Socket.IO supports middleware that runs before the connection is established.

You can check user credentials (like a token) in this middleware and accept or reject the connection.

------------------------------------------------------------------------------------------------------------------

How do you store and manage user sessions in a Socket.IO application?```
------------------------------------------------------------------------------------------------------------------

How do you implement middleware in Socket.IO?
------------------------------------------------------------------------------------------------------------------

Can Socket.IO be used with a React or Angular frontend? How?
------------------------------------------------------------------------------------------------------------------